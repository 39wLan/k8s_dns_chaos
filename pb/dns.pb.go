// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dns.proto

package pb

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SetDNSChaosRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pods                 []string `protobuf:"bytes,2,rep,name=pods,proto3" json:"pods,omitempty"`
	Mode                 string   `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Selector             string   `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDNSChaosRequest) Reset()         { *m = SetDNSChaosRequest{} }
func (m *SetDNSChaosRequest) String() string { return proto.CompactTextString(m) }
func (*SetDNSChaosRequest) ProtoMessage()    {}
func (*SetDNSChaosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_e7f9bfc4578a3284, []int{0}
}
func (m *SetDNSChaosRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDNSChaosRequest.Unmarshal(m, b)
}
func (m *SetDNSChaosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDNSChaosRequest.Marshal(b, m, deterministic)
}
func (dst *SetDNSChaosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDNSChaosRequest.Merge(dst, src)
}
func (m *SetDNSChaosRequest) XXX_Size() int {
	return xxx_messageInfo_SetDNSChaosRequest.Size(m)
}
func (m *SetDNSChaosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDNSChaosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDNSChaosRequest proto.InternalMessageInfo

func (m *SetDNSChaosRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetDNSChaosRequest) GetPods() []string {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *SetDNSChaosRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *SetDNSChaosRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

type CancelDNSChaosRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelDNSChaosRequest) Reset()         { *m = CancelDNSChaosRequest{} }
func (m *CancelDNSChaosRequest) String() string { return proto.CompactTextString(m) }
func (*CancelDNSChaosRequest) ProtoMessage()    {}
func (*CancelDNSChaosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_e7f9bfc4578a3284, []int{1}
}
func (m *CancelDNSChaosRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelDNSChaosRequest.Unmarshal(m, b)
}
func (m *CancelDNSChaosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelDNSChaosRequest.Marshal(b, m, deterministic)
}
func (dst *CancelDNSChaosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelDNSChaosRequest.Merge(dst, src)
}
func (m *CancelDNSChaosRequest) XXX_Size() int {
	return xxx_messageInfo_CancelDNSChaosRequest.Size(m)
}
func (m *CancelDNSChaosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelDNSChaosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelDNSChaosRequest proto.InternalMessageInfo

func (m *CancelDNSChaosRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DNSChaosResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSChaosResponse) Reset()         { *m = DNSChaosResponse{} }
func (m *DNSChaosResponse) String() string { return proto.CompactTextString(m) }
func (*DNSChaosResponse) ProtoMessage()    {}
func (*DNSChaosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_e7f9bfc4578a3284, []int{2}
}
func (m *DNSChaosResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSChaosResponse.Unmarshal(m, b)
}
func (m *DNSChaosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSChaosResponse.Marshal(b, m, deterministic)
}
func (dst *DNSChaosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSChaosResponse.Merge(dst, src)
}
func (m *DNSChaosResponse) XXX_Size() int {
	return xxx_messageInfo_DNSChaosResponse.Size(m)
}
func (m *DNSChaosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSChaosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DNSChaosResponse proto.InternalMessageInfo

func (m *DNSChaosResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DNSChaosResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SetDNSChaosRequest)(nil), "pb.SetDNSChaosRequest")
	proto.RegisterType((*CancelDNSChaosRequest)(nil), "pb.CancelDNSChaosRequest")
	proto.RegisterType((*DNSChaosResponse)(nil), "pb.DNSChaosResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DNSClient is the client API for DNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNSClient interface {
	SetDNSChaos(ctx context.Context, in *SetDNSChaosRequest, opts ...grpc.CallOption) (*DNSChaosResponse, error)
	CancelDNSChaos(ctx context.Context, in *CancelDNSChaosRequest, opts ...grpc.CallOption) (*DNSChaosResponse, error)
}

type dNSClient struct {
	cc *grpc.ClientConn
}

func NewDNSClient(cc *grpc.ClientConn) DNSClient {
	return &dNSClient{cc}
}

func (c *dNSClient) SetDNSChaos(ctx context.Context, in *SetDNSChaosRequest, opts ...grpc.CallOption) (*DNSChaosResponse, error) {
	out := new(DNSChaosResponse)
	err := c.cc.Invoke(ctx, "/pb.DNS/SetDNSChaos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) CancelDNSChaos(ctx context.Context, in *CancelDNSChaosRequest, opts ...grpc.CallOption) (*DNSChaosResponse, error) {
	out := new(DNSChaosResponse)
	err := c.cc.Invoke(ctx, "/pb.DNS/CancelDNSChaos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSServer is the server API for DNS service.
type DNSServer interface {
	SetDNSChaos(context.Context, *SetDNSChaosRequest) (*DNSChaosResponse, error)
	CancelDNSChaos(context.Context, *CancelDNSChaosRequest) (*DNSChaosResponse, error)
}

func RegisterDNSServer(s *grpc.Server, srv DNSServer) {
	s.RegisterService(&_DNS_serviceDesc, srv)
}

func _DNS_SetDNSChaos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDNSChaosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).SetDNSChaos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNS/SetDNSChaos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).SetDNSChaos(ctx, req.(*SetDNSChaosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_CancelDNSChaos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDNSChaosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).CancelDNSChaos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNS/CancelDNSChaos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).CancelDNSChaos(ctx, req.(*CancelDNSChaosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DNS",
	HandlerType: (*DNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDNSChaos",
			Handler:    _DNS_SetDNSChaos_Handler,
		},
		{
			MethodName: "CancelDNSChaos",
			Handler:    _DNS_CancelDNSChaos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns.proto",
}

func init() { proto.RegisterFile("dns.proto", fileDescriptor_dns_e7f9bfc4578a3284) }

var fileDescriptor_dns_e7f9bfc4578a3284 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x6d, 0xb3, 0x2c, 0xbb, 0x23, 0xc8, 0x32, 0xe8, 0x12, 0xf7, 0xb4, 0xe4, 0x24, 0x08,
	0x3d, 0xe8, 0x55, 0x4f, 0xed, 0xb9, 0x87, 0xf6, 0x17, 0xf4, 0x63, 0xd0, 0x43, 0x9a, 0xc4, 0x4e,
	0xfa, 0x23, 0xfc, 0xd7, 0x32, 0x51, 0xfc, 0x16, 0xbc, 0xbd, 0xf3, 0xf0, 0x24, 0x93, 0x37, 0xb0,
	0x1d, 0x1d, 0x17, 0x61, 0xf6, 0xd1, 0x63, 0x1e, 0x7a, 0x63, 0x01, 0x5b, 0x8a, 0x55, 0xdd, 0x96,
	0x8f, 0x9d, 0xe7, 0x86, 0x9e, 0x16, 0xe2, 0x88, 0x08, 0x2b, 0xd7, 0x4d, 0xa4, 0xb3, 0x63, 0x76,
	0xb5, 0x6d, 0x52, 0x16, 0x16, 0xfc, 0xc8, 0x3a, 0x3f, 0x2a, 0x61, 0x92, 0x85, 0x4d, 0x7e, 0x24,
	0xad, 0x5e, 0x3d, 0xc9, 0x78, 0x80, 0x0d, 0x93, 0xa5, 0x21, 0xfa, 0x59, 0xaf, 0x12, 0x7f, 0x9f,
	0xcd, 0x35, 0x5c, 0x94, 0x9d, 0x1b, 0xc8, 0xfe, 0x63, 0xa1, 0xb9, 0x83, 0xdd, 0x87, 0xc6, 0xc1,
	0x3b, 0x26, 0xdc, 0xc3, 0x7a, 0x26, 0x5e, 0x6c, 0x4c, 0xe6, 0xa6, 0x79, 0x9b, 0x70, 0x07, 0x6a,
	0xe2, 0x07, 0x9d, 0xa7, 0xe3, 0x12, 0x6f, 0x9e, 0x33, 0x50, 0x55, 0xdd, 0xe2, 0x3d, 0x9c, 0x7e,
	0x2a, 0x88, 0xfb, 0x22, 0xf4, 0xc5, 0xcf, 0xc6, 0x87, 0x73, 0xe1, 0xdf, 0xd7, 0x99, 0x13, 0x2c,
	0xe1, 0xec, 0xeb, 0x8b, 0xf1, 0x52, 0xcc, 0x5f, 0x5b, 0xfc, 0x75, 0x49, 0xbf, 0x4e, 0xff, 0x7d,
	0xfb, 0x12, 0x00, 0x00, 0xff, 0xff, 0x74, 0x2d, 0xd6, 0xb3, 0x7c, 0x01, 0x00, 0x00,
}
